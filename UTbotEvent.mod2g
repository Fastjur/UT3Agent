use UTbot as knowledge.
% We need randomall here to pick a random navPoint as target.
order=randomall.

module UTbotEvent {
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))
		do delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).
		
	% Fix spinning???
	if goal(at(X)), percept(at(X)) then drop(at(X)).

	% Update orientation
	forall bel(orientation(OldLoc, OldRot, OldVel)), percept(orientation(Loc, Rot, Vel))
		do delete(orientation(OldLoc, OldRot, OldVel)) + insert(orientation(Loc, Rot, Vel)).
		
	% Update status
	forall bel(status(OldHP, OldAP, OldAdr, OldCombo)), percept(status(Health, Armour, Adrenaline, Combo))
		do delete(status(OldHP, OldAP, OldAdr, OldCombo)) + insert(status(Health, Armour, Adrenaline, Combo)).
		
	% Update current weapons and deployables
	forall bel(currentWeapon(OldType, OldFireMode)), percept(currentWeapon(Type, FireMode))
		do delete(currentWeapon(OldType, OldFireMode)) + insert(currentWeapon(Type, FireMode)).
	
	% Update deployable
	if percept(deployable(Weapon)), bel(deployable(Old)) then delete(deployable(Old)) + insert(deployable(Weapon)).
		
	% Update visible items
	forall percept(item(ID, Label, Type, Pos)) do insert(item(ID, Label, Type, Pos)).
	forall percept(not(item(ID, Label, Type, Pos))) do delete(item(ID, Label, Type, Pos)).

	% Define priority for health when below 100 (Defined in UTbot.pl). These are always added, so there is no requirement to see the healthpacks.
	if goal(at(OldID)), bel(needHealth, not(isHealthPack(OldID)), isHealthPack(ID)) then drop(at(OldID)) + adopt(at(ID)).
	
	% Goto armor when we see one and we aren't travelling to health packs, we only do this when we see the item, contrary to the health packs which are always added
	% CHECK THIS ONE
	if goal(at(OldID)), bel(needArmor, not(needHealth), item(ID, Label, _, _), isArmorPack(ID)) then drop(at(OldID)) + adopt(at(ID)).
	
	% Use deployable when we have one
	if bel(deployable(X), currentWeapon(W,_), member(W,X)) then adopt(deploy).
	
	% If we have no goal yet, pick a random navPoint as our goal.
	% Note that it may be unreachable; this example does not handle that.
	if not(goal(at(_))), bel(navPoint(Target)) then adopt(at(Target)).
	if bel(navigation(stuck, Destination), navPoint(Target), Target \= Destination) then drop(at(Destination)) + adopt(at(Target)).
}