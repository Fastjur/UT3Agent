use UTbot as knowledge.

order=linearall.

module UTbotEvent {
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))
		do delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).

	% Update orientation
	forall bel(orientation(OldLoc, OldRot, OldVel)), percept(orientation(Loc, Rot, Vel))
		do delete(orientation(OldLoc, OldRot, OldVel)) + insert(orientation(Loc, Rot, Vel)).
		
	% Update status
	forall bel(status(OldHP, OldAP, OldAdr, OldCombo)), percept(status(Health, Armour, Adrenaline, Combo))
		do delete(status(OldHP, OldAP, OldAdr, OldCombo)) + insert(status(Health, Armour, Adrenaline, Combo)).
		
	% Update current weapons and deployables
	forall bel(currentWeapon(OldType, OldFireMode)), percept(currentWeapon(Type, FireMode))
		do delete(currentWeapon(OldType, OldFireMode)) + insert(currentWeapon(Type, FireMode)).
		
	% Update inventory
	forall percept(weapon(Type, Ammo, AltAmmo)) do insert(weapon(Type, Ammo, AltAmmo)).
	forall percept(not(weapon(Type, Ammo, AltAmmo))) do delete(weapon(Type, Ammo, AltAmmo)).
	
	forall bel(powerup(OldType, OldDur)), percept(powerup(Type, Duration))
		do delete(powerup(OldType, OldDur)) + insert(powerup(Type, Duration)).
	
	% Update deployable
	forall bel(deployable(Old)), percept(deployable(Weapon))
		do delete(deployable(Old)) + insert(deployable(Weapon)).
		
	% Update visible items
	forall percept(item(ID, Label, Type, Pos)) do insert(item(ID, Label, Type, Pos)).
	forall percept(not(item(ID, Label, Type, Pos))) do delete(item(ID, Label, Type, Pos)).
	
	% Update visible bots (all enemies in DM mode)
	forall percept(bot(ID,Name,Team,Pos,Weapon,FireMode)) do insert(bot(ID,Name,Team,Pos,Weapon,FireMode)).
	forall percept(not(bot(ID,Name,Team,Pos,Weapon,FireMode))) do delete(bot(ID,Name,Team,Pos,Weapon,FireMode)).
	
	% If we can see an enemy, adopt the goal to shoot/follow him
	% Handled in UTbotShootEnemy.mod2g
	if bel(seeEnemy) then adopt(shootEnemy).

	% Define priority for health when below 80 (Defined in UTbot.pl). Because health is important, there is no need to actualy 'see' a health pack,
	% instead, in the module itself it will handle navigation if no health packs are visible.
	% Handled in UTbotHealth.mod2g
	if bel(needHealth, not(shootEnemy)) then adopt(pickUpHp).
	
	% Adopt to pick up some armor when we see one and we aren't travelling to health packs,
	% we only do this when we see the item, contrary to the health packs.
	% Handled in UTbotArmor.mod2g
	if bel(needArmor, not(needHealth), seeArmor, not(shootEnemy)) then adopt(pickUpArmor).
	
	% Adopt to pick up a weapon when we see one and we aren't travelling to health packs,
	% we only do this when we see the item, contrary to the health packs.
	% Handled in UTbotWeapon.mod2g
	if bel(seeWeapon, not(needHealth), not(shootEnemy)) then adopt(pickUpWeapon).
	
	% If we have no goal yet, pick a random navPoint as our goal
	% Note that it may be unreachable; this example does not handle that.
	% Handled in UTbotNavigateRandom.mod2g
	if not(goal(pickUpHp)), not(goal(pickUpArmor)), not(goal(pickUpWeapon)), not(goal(shootEnemy)) then adopt(navigateRandom).
	
	% If our navigation belief says we're stuck, then drop the current Destination and adopt another navPoint to be at
	% which is not the current one. This way the bot free's itself
	if bel(navigation(stuck, Destination), navPoint(Target,_,_)) then drop(at(Destination)) + adopt(at(Target)).
	
	% If our navigation belief says we're attempting to go somewhere which is not reachable, then drop the current Destination and
	% adopt another navPoint to be at which is not the current one. Also insert that this location is unreachable.
	if bel(navigation(noPath, Dest), navPoint(Target,_,_), (Dest \= Target)) then drop(at(Dest)) + adopt(at(Target)) + insert(unreachable(Dest)).
	
	% Use deployable when we have one
	if bel(deployable(X), currentWeapon(W,_), member(W,X)) then adopt(deploy).
}